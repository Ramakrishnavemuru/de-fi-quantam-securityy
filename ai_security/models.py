from django.db import models
from accounts.models import User
from blockchain.models import Transaction

class SecurityAlert(models.Model):
    """
    Represents a security alert generated by the AI security system.
    """
    SEVERITY_CHOICES = (
        ('LOW', 'Low'),
        ('MEDIUM', 'Medium'),
        ('HIGH', 'High'),
        ('CRITICAL', 'Critical'),
    )
    
    ALERT_TYPES = (
        ('ANOMALY', 'Transaction Anomaly'),
        ('ATTACK', 'Potential Attack'),
        ('QUANTUM', 'Quantum Threat'),
        ('SUSPICIOUS', 'Suspicious Activity'),
    )
    
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='security_alerts')
    transaction = models.ForeignKey(Transaction, on_delete=models.SET_NULL, null=True, blank=True, related_name='alerts')
    alert_type = models.CharField(max_length=20, choices=ALERT_TYPES)
    severity = models.CharField(max_length=10, choices=SEVERITY_CHOICES)
    description = models.TextField()
    timestamp = models.DateTimeField(auto_now_add=True)
    is_resolved = models.BooleanField(default=False)
    resolved_at = models.DateTimeField(null=True, blank=True)
    resolved_by = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True, related_name='resolved_alerts')
    resolution_notes = models.TextField(blank=True)
    
    def __str__(self):
        return f"{self.alert_type} - {self.severity} - {self.timestamp}"

class AnomalyDetectionModel(models.Model):
    """
    Represents a trained anomaly detection model.
    """
    MODEL_TYPES = (
        ('ISOLATION_FOREST', 'Isolation Forest'),
        ('ONE_CLASS_SVM', 'One-Class SVM'),
        ('LOCAL_OUTLIER_FACTOR', 'Local Outlier Factor'),
        ('AUTOENCODER', 'Autoencoder'),
    )
    
    name = models.CharField(max_length=100)
    model_type = models.CharField(max_length=30, choices=MODEL_TYPES)
    version = models.CharField(max_length=20)
    file_path = models.CharField(max_length=255)
    created_at = models.DateTimeField(auto_now_add=True)
    is_active = models.BooleanField(default=True)
    accuracy = models.FloatField(null=True, blank=True)
    precision = models.FloatField(null=True, blank=True)
    recall = models.FloatField(null=True, blank=True)
    f1_score = models.FloatField(null=True, blank=True)
    
    def __str__(self):
        return f"{self.name} v{self.version} ({self.model_type})"

class SecurityScan(models.Model):
    """
    Represents a security scan of the system.
    """
    SCAN_TYPES = (
        ('FULL', 'Full System Scan'),
        ('TRANSACTION', 'Transaction Analysis'),
        ('SMART_CONTRACT', 'Smart Contract Audit'),
        ('QUANTUM_VULNERABILITY', 'Quantum Vulnerability Scan'),
    )
    
    STATUS_CHOICES = (
        ('PENDING', 'Pending'),
        ('RUNNING', 'Running'),
        ('COMPLETED', 'Completed'),
        ('FAILED', 'Failed'),
    )
    
    scan_type = models.CharField(max_length=30, choices=SCAN_TYPES)
    status = models.CharField(max_length=10, choices=STATUS_CHOICES, default='PENDING')
    started_at = models.DateTimeField(auto_now_add=True)
    completed_at = models.DateTimeField(null=True, blank=True)
    initiated_by = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, related_name='initiated_scans')
    results_summary = models.TextField(blank=True)
    issues_found = models.IntegerField(default=0)
    critical_issues = models.IntegerField(default=0)
    
    def __str__(self):
        return f"{self.scan_type} - {self.status} - {self.started_at}"

